This is a speech adapter, running in user space,
based on the acsint / acsbridge system.
It is modeled after the Jupiter speech adapter that use to live in the kernel,
but we don't have to be in the kernel any longer!

This is a work in progress, well tested for some synthesizers,
and not even tried on others.

jupiter.c is the adapter,
and it shows what you can do in 1,500 lines of code if you have a bridge layer
and a text preprocessor at your disposal.

My key bindings are in jup.cfg.
You may want to review these, for documentation purposes,
or as an initial template to build your own config file.
This config file binds speech commands to various function and control keys.
My speech commands are at a lower level than most adapters.
Left one character, right one word,
speak current word, end of line, and so on.
You can string these together to make a composite command,
which is then tied to a function, control, or alt key.
Thus control f might put two atomic commands together:
move right one character, speak character.
This does the obvious, move right and speak that character.
The actual line looks like this.

^f for capchar

for is the command to move forward one character;
capchar reads the current character,
and will say "cap j" for J, to distinguish it from lower case j.
Only the last command in a string can actually speak something.
Prior commands move the cursor about, or set modes.
The atomic speech commands are as follows.
This mirrors the static table  speechcommands in jupiter.c.

clbuf: clear buffer
cursor: visual cursor
sbuf: start of buffer
ebuf: end of buffer
sline: start of line
eline: end of line
sword: start of word
eword: end of word
lspc: left spaces
rspc: right spaces
back: back one character
for: forward one character
prow: preivious row
nrow: next row
asword: reed the current karecter as a nato word
char: reed the current karecter
capchar: read capital x as cap x
colnum: read current cohllumm number
word: reed the current word
read: start reeding
shutup: stop speaking
bypass: pass next karecter through
clmode: clear bighnary mode
stmode: set bighnary mode
toggle: toggle bighnary mode
searchu: search up
searchd: search down
volume: set volume
 incvol: increase volume
 decvol: decrease volume
speed: set speed
 incspd: increase speed
 decspd: decrease speed
pitch: set pitch
 incpch: increase pitch
 decpch: decrease pitch
 voice: set voice
bind: key binding
lcline: last complete line
 markl: mark left
 markr: mark right
 echo: set echo
 label: label
 jump: jump
reexec: restart the adapter
reload: reload the config file
dump: dump buffer
suspend: suspend the adapter
step: test step function

tpencode.c encodes certain constructs like dates and times and phone numbers
and addresses etc, and tpxlate.c translates these back out into words.
Thus 02/03/1932 becomes
february third nineteen thirdy 2
This is alphanumeric translation that cannot be done in your dictionary.
It is more than replacing one word with another,
and it is often context sensitive.
It is a bit clunky at times, with more false positives than I would like.
Knowing whether to turn ST into street or saint is notoriously difficult,
to site one example.
tpencode.c encodes these in a language independent manner,
encoding a date fore example,
then tpxlate.c expands them in a language specific manner,
so that a date like 02/03/1932 is read as you would like to hear.
I also turn this into today, or yesterday, if that's what it is.
This is all nice when it works, and a bit confusing when it doesn't.
Translation (tpxlate.c) is only implmemented for English at present.
The command line option -a enables this alphanumeric translation;
leave it off if you find it more confusing than helpful,
or if you are not running in English.

tpencode.c and tpxlate.c might, perhaps, belong in the bridge layer.
It is not jupiter specific, so why should it be here?

You can exercise the text preprocessor, without running the adapter,
by running jupiter tts or jupiter ltts
ltts reads punctuations literally, every one of them.
That may sound like overkill, but that's what I do 99.9% of the time.
Perhaps because I'm a programmer - every punctuation is important.
Even when I read a story, I'd rather hear the word comma than a pause.
tts-trial has text to experiment with.
jupiter ltts <tts-trial

-d is daemon mode, puts the program in the backgroun.

I have the following near the top of /etc/rc.sysinit
so my system starts talking as soon as possible, even in single user mode.

#  bring in the acsint device driver,
#  to carry output and keystrokes into user space.
#  Yes, you could set this up in udev, but I don't have udev running.
modprobe acsint

#  Start jupiter speech in daemon mode, doubletalk synthesizer, port ttyS0
#  The config file is left to its default, /etc/jupiter.cfg
#  The options and args have to appear in this order.
jupiter -d -a dbe 0

If you're running a soft synth like espeak, you may want something like this.

jupiter -d esp "|espeakup -V en-us-a 2>/dev/null"

But first, you should set up your sound card,
load the right module and call alsactl to initialize.
Normally this is done much later but we need it now,
or the adapter won't talk.
Also, mount /sys type sysfs,
because jupiter looks at the system, through /sys,
to see if /dev/acsint is correct.
If it is missing, or its major / minor number is wrong,
and assuming jupiter runs as root,
then it recreates /dev/acsint to have the correct major and minor numbers.
I'm trying to do everything I can to make this work,
because if it doesn't, the system isn't talking, and you're in trouble.

